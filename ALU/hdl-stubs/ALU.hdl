/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16 (a=x, b=false, sel=zx, out=x1);
    Not16 (in=x1, out=x1not);
    Mux16 (a=x1, b=x1not, sel=nx, out=x2);
    Mux16 (a=y, b=false, sel=zy, out=y1);
    Not16 (in=y1, out=y1not);
    Mux16 (a=y1, b=y1not, sel=ny, out=y2);    
    Add16 (a=x2, b=y2, out=xyadd);
    And16 (a=x2, b=y2, out=xyand);
    Mux16 (a=xyand, b=xyadd, sel=f, out=xyf);
    Not16 (in=xyf, out=xyfnot);
    Mux16 (a=xyf, b=xyfnot, sel=no, out=out, out[0..7]=outLow, out[8..15]=outHigh, out[15]=outMSB);
    Or8Way (in=outLow, out=outLowCheck);
    Or8Way (in=outHigh, out=outHighCheck);
    Or (a=outLowCheck, b=outHighCheck, out=outCheck);
    Not (in=outCheck, out=zr);
    Mux(a=false, b=true, sel=outMSB, out=ng);   
}
